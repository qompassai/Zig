//////////////////////////////////////////////////////////
// This file was auto-generated by java_bindings.zig
// Do not manually modify.
//////////////////////////////////////////////////////////

package com.tigerbeetle;

import java.nio.ByteBuffer;


final class QueryFilterBatch extends Batch {

    interface Struct {
        int SIZE = 64;

        int UserData128 = 0;
        int UserData64 = 16;
        int UserData32 = 24;
        int Ledger = 28;
        int Code = 32;
        int Reserved = 34;
        int TimestampMin = 40;
        int TimestampMax = 48;
        int Limit = 56;
        int Flags = 60;
    }

    static final QueryFilterBatch EMPTY = new QueryFilterBatch(0);

    /**
     * Creates an empty batch with the desired maximum capacity.
     * <p>
     * Once created, an instance cannot be resized, however it may contain any number of elements
     * between zero and its {@link #getCapacity capacity}.
     *
     * @param capacity the maximum capacity.
     * @throws IllegalArgumentException if capacity is negative.
     */
    public QueryFilterBatch(final int capacity) {
        super(capacity, Struct.SIZE);
    }

    QueryFilterBatch(final ByteBuffer buffer) {
        super(buffer, Struct.SIZE);
    }

    /**
     * @return an array of 16 bytes representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public byte[] getUserData128() {
        return getUInt128(at(Struct.UserData128));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value
              is to be retrieved.
     * @return a {@code long} representing the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public long getUserData128(final UInt128 part) {
        return getUInt128(at(Struct.UserData128), part);
    }

    /**
     * @param userData128 an array of 16 bytes representing the 128-bit value.
     * @throws IllegalArgumentException if {@code userData128} is not 16 bytes long.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    public void setUserData128(final byte[] userData128) {
        putUInt128(at(Struct.UserData128), userData128);
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    public void setUserData128(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.UserData128), leastSignificant, mostSignificant);
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    public void setUserData128(final long leastSignificant) {
        putUInt128(at(Struct.UserData128), leastSignificant, 0);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public long getUserData64() {
        final var value = getUInt64(at(Struct.UserData64));
        return value;
    }

    /**
     * @param userData64
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    public void setUserData64(final long userData64) {
        putUInt64(at(Struct.UserData64), userData64);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public int getUserData32() {
        final var value = getUInt32(at(Struct.UserData32));
        return value;
    }

    /**
     * @param userData32
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    public void setUserData32(final int userData32) {
        putUInt32(at(Struct.UserData32), userData32);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public int getLedger() {
        final var value = getUInt32(at(Struct.Ledger));
        return value;
    }

    /**
     * @param ledger
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    public void setLedger(final int ledger) {
        putUInt32(at(Struct.Ledger), ledger);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public int getCode() {
        final var value = getUInt16(at(Struct.Code));
        return value;
    }

    /**
     * @param code
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    public void setCode(final int code) {
        putUInt16(at(Struct.Code), code);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    byte[] getReserved() {
        return getArray(at(Struct.Reserved), 6);
    }

    /**
     * @param reserved
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    void setReserved(byte[] reserved) {
        if (reserved == null)
            reserved = new byte[6];
        if (reserved.length != 6)
            throw new IllegalArgumentException("Reserved must be 6 bytes long");
        putArray(at(Struct.Reserved), reserved);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public long getTimestampMin() {
        final var value = getUInt64(at(Struct.TimestampMin));
        return value;
    }

    /**
     * @param timestampMin
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    public void setTimestampMin(final long timestampMin) {
        putUInt64(at(Struct.TimestampMin), timestampMin);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public long getTimestampMax() {
        final var value = getUInt64(at(Struct.TimestampMax));
        return value;
    }

    /**
     * @param timestampMax
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    public void setTimestampMax(final long timestampMax) {
        putUInt64(at(Struct.TimestampMax), timestampMax);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public int getLimit() {
        final var value = getUInt32(at(Struct.Limit));
        return value;
    }

    /**
     * @param limit
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    public void setLimit(final int limit) {
        putUInt32(at(Struct.Limit), limit);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public int getFlags() {
        final var value = getUInt32(at(Struct.Flags));
        return value;
    }

    /**
     * @param flags
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    public void setFlags(final int flags) {
        putUInt32(at(Struct.Flags), flags);
    }

}

